/*
	오류
	1.에러(error)		:네트워크 장애, 메모리, 하드웨어 >> 개발자가 코드적으로 해결 못하는 것
	2.예외(exception):개발자의 코드의 실수에 의해서 발생한 것 >> 최종적으로는 코드 수정 >> 일단은 방어책 마련(예외처리)
	>> 예외가 발생하면 프로그램은 강제 종료됨
	3. 예외처리: 문제가 생길 수 있는 코드에 안전장치를 마련 >> 강제종료(x) >> 일단 진행
		비정상적인 종료를 막는다

	try{
		>>문제가 발생할 수 있는 코드를 넣어두는 곳
		>>문제 예외가 발생하면 
	}catch(Exception e){
		>>문제가 생기면 catch로 잡아서 문제를 파악함
		>>처리
		>>1. 관리자에게 e-mail을 보낸다
		>>2. 로그 파일에 문제를 기록한다
		>>3. 강제종료는 일단 막는다
		>>4. 결국에는 개발자가 해결해야 한다.
	}finally{
		>> 문제가 발생하던, 발생하지 않던, 강제로 수행되어야 할 코드
		>>ex) db 연결 해제하기
	}

 */



public class Ex01_Exception {

	public static void main(String[] args) {
		System.out.println("main start");
		
		try {
			System.out.println(0/0); //연산 //문제가 발생하더라도 일단은 프로그램이 강제로 종료되지 않았으면 좋겠다.
			//문제가 발생하면 
			//그 문제를 담을 수 있는 객체가 자동으로 생성
			//컴파일러가 문제에 맞는 객체를 new하여 생성 java.lang.ArithmeticException
			//발생한 문제의 정보를 ArithmeticException에게 전달
			
		}catch (Exception e) { //예외 수습 -> 정보를 알려주는 것(문제를 해결해주는 것이 아님)
			//무슨 문제가 발생했고, 원인은 무엇인지에 대한 정보를 보는 것
			e.printStackTrace();
			System.out.println("catch: "+e.getMessage());
		}
		
		System.out.println("main end");

	}

}
